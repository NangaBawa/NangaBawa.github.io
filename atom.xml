<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just Smile</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-17T12:38:41.078Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Smile</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://example.com/2022/10/12/Git%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/10/12/Git%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-12T14:36:49.136Z</published>
    <updated>2022-10-17T12:38:41.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Git简介"><a href="#1-Git简介" class="headerlink" title="1.Git简介"></a>1.Git简介</h3><ul><li><p>Git：开源的分布式版本控制系统</p><ul><li>Linus Torvalds 为了帮助管理 Linux 内核而开发</li><li>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</li></ul></li><li><p>Git与SVN的区别</p><ul><li>SVN是集中式版本控制系统，版本库是集中放在中央服务器。首先要从中央服务器那里得到最新的版本，再将修改后的版本推送到中央服务器。其必须联网才能进行工作。</li><li>Git是分布式版本控制系统，其没有中央服务器，每个人的电脑就是一个完整的版本库。</li></ul></li></ul><h3 id="2-Git基本操作"><a href="#2-Git基本操作" class="headerlink" title="2.Git基本操作"></a>2.Git基本操作</h3><ul><li><code>git --version</code>可以查看Git的版本</li><li>Git初始化配置<ul><li><code>git config --global user.name &quot;&lt;用户名&gt;&quot;</code></li><li><code>git config --global user.email &quot;&lt;电子邮件&gt;&quot;</code></li></ul></li></ul><p>​    <strong>PS：1. 该配置会在Github主页上显示谁提交了该文件</strong></p><p>​            <strong>2. –global 参数表示你这台机器上所有的git仓库都会使用这个配置</strong></p><ul><li><p><code>git status</code> 查看仓库当前状态</p></li><li><p><code>git log</code> 查看所有产生的commit记录</p></li><li><p>Git运作流程</p></li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg" alt="img"></p><ul><li>创建并初始化新的Git仓库(在对应的目录下运行<strong>Git Bash</strong>)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>​    Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p><p>​    .git目录默认是隐藏的，可以用<code>ls -a</code>命令查看</p><ul><li>将该文件\目录添加到暂存区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加一个或多个文件</span><br>git add [file1] [file2]...<br><br><span class="hljs-comment"># 添加指定目录</span><br>git add [<span class="hljs-built_in">dir</span>]<br><br><span class="hljs-comment"># 添加当前目录下的所有文件</span><br>git add .<br></code></pre></td></tr></table></figure><p>​    你可以使用 <code>git rm --cached</code> 这个命令去移除这个缓存</p><ul><li>将暂存区内容添加到仓库中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;提交信息&quot;</span><br></code></pre></td></tr></table></figure><ul><li>本地项目和GitHub上的项目进行关联</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@github.com:stormzhang/test.git<br></code></pre></td></tr></table></figure><ul><li>提交到远程库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin master<br></code></pre></td></tr></table></figure><ul><li>远程仓库拉到本地</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master<br></code></pre></td></tr></table></figure><ul><li>克隆GitHub上的仓库到本地</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:xx/test.git<br></code></pre></td></tr></table></figure><p>​    这个时候该项目本身就已经是一个git 仓库，都已经关联好了远程仓库</p><h3 id="3-Git分支"><a href="#3-Git分支" class="headerlink" title="3.Git分支"></a>3.Git分支</h3><ul><li><p>A, B俩人都在做同一个项目，但是不同的模块，这个时候A新建了一个分支叫a， B新建了一个分支叫b，这样A、B做的所有代码改动都各自在各自的分支，互不影响，等到俩人都把各自的模块都做完了，最后再统一把分支合并起来。</p></li><li><p>分支操作</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前分支情况</span><br>git branch<br><br><span class="hljs-comment"># 创建分支a</span><br>git branch a<br><br><span class="hljs-comment"># 切换到分支a</span><br>git checkout a<br><br><span class="hljs-comment"># 上述两步操作可以写成一步：git checkout -b a</span><br><br><span class="hljs-comment"># 将a分支内容合并到主分支上</span><br>git merge a<br><br><span class="hljs-comment"># 删除指定分支a, 若选项为D则强制删除</span><br>git branch -d a<br><br><span class="hljs-comment"># 建立标签</span><br>git tag v1.0<br><br><span class="hljs-comment"># 查看历史tag记录</span><br>git tag<br><br><span class="hljs-comment"># 切换到某个tag</span><br>git checkout v1.0<br></code></pre></td></tr></table></figure><h3 id="4-向Github提交代码"><a href="#4-向Github提交代码" class="headerlink" title="4.向Github提交代码"></a>4.向Github提交代码</h3><ol><li>输入<strong>ssh-keygen -t rsa</strong>，接着连续三个回车键会生成两个隐藏文件 <strong>id_rsa</strong> 和 <strong>id_rsa.pub</strong>（Windows在<strong>c/Documents and Settings/username/.ssh</strong>下 ）</li><li>在 GitHub 上的设置页面，点击最左侧 <strong>SSH and GPG keys</strong>，把 <strong>id_rsa.pub</strong> 公钥文件里的内容复制粘贴</li><li>输入<strong>ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a></strong>进行测试</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Git简介&quot;&gt;&lt;a href=&quot;#1-Git简介&quot; class=&quot;headerlink&quot; title=&quot;1.Git简介&quot;&gt;&lt;/a&gt;1.Git简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Git：开源的分布式版本控制系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linus Torva</summary>
      
    
    
    
    <category term="Git笔记" scheme="http://example.com/categories/Git%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/12/hello-world/"/>
    <id>http://example.com/2022/10/12/hello-world/</id>
    <published>2022-10-12T12:45:59.012Z</published>
    <updated>2022-10-12T14:43:40.519Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>Hello！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
